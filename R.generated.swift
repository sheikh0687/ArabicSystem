//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Main`.
    static let main = Rswift.ColorResource(bundle: R.hostingBundle, name: "Main")
    /// Color `Theme`.
    static let theme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Theme")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Main", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Theme", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func theme(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.theme.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 145 images.
  struct image {
    /// Image `ApplePay`.
    static let applePay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ApplePay")
    /// Image `Calander`.
    static let calander = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calander")
    /// Image `Home 24`.
    static let home24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home 24")
    /// Image `Notification24`.
    static let notification24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notification24")
    /// Image `Offers24`.
    static let offers24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Offers24")
    /// Image `PromoApplied`.
    static let promoApplied = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoApplied")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Right Arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Right Arrow")
    /// Image `Setting24`.
    static let setting24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Setting24")
    /// Image `WhatsApp 1`.
    static let whatsApp1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhatsApp 1")
    /// Image `WhatsApp`.
    static let whatsApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "WhatsApp")
    /// Image `addcart`.
    static let addcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "addcart")
    /// Image `app_icon`.
    static let app_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_icon")
    /// Image `arroimg`.
    static let arroimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "arroimg")
    /// Image `backimg`.
    static let backimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "backimg")
    /// Image `bag`.
    static let bag = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag")
    /// Image `black_back`.
    static let black_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "black_back")
    /// Image `booking`.
    static let booking = Rswift.ImageResource(bundle: R.hostingBundle, name: "booking")
    /// Image `button_img`.
    static let button_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "button_img")
    /// Image `cart_img`.
    static let cart_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_img")
    /// Image `cartimg2`.
    static let cartimg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg2")
    /// Image `cartimg3`.
    static let cartimg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg3")
    /// Image `cartimg`.
    static let cartimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cartimg")
    /// Image `catic`.
    static let catic = Rswift.ImageResource(bundle: R.hostingBundle, name: "catic")
    /// Image `chat_active`.
    static let chat_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_active")
    /// Image `chat_deactive`.
    static let chat_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_deactive")
    /// Image `cleaning2`.
    static let cleaning2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleaning2")
    /// Image `cleaning3`.
    static let cleaning3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleaning3")
    /// Image `cleaning`.
    static let cleaning = Rswift.ImageResource(bundle: R.hostingBundle, name: "cleaning")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `comment`.
    static let comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment")
    /// Image `contactus`.
    static let contactus = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus")
    /// Image `cycling`.
    static let cycling = Rswift.ImageResource(bundle: R.hostingBundle, name: "cycling")
    /// Image `dateic`.
    static let dateic = Rswift.ImageResource(bundle: R.hostingBundle, name: "dateic")
    /// Image `delete_ic`.
    static let delete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete_ic")
    /// Image `donatehistory`.
    static let donatehistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "donatehistory")
    /// Image `drawer_icon`.
    static let drawer_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "drawer_icon")
    /// Image `dummy_user`.
    static let dummy_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "dummy_user")
    /// Image `edit_new`.
    static let edit_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_new")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `editiprofile_ic`.
    static let editiprofile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "editiprofile_ic")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `feed_active`.
    static let feed_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_active")
    /// Image `feed_deactive`.
    static let feed_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_deactive")
    /// Image `feedback`.
    static let feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "feedback")
    /// Image `filter_ic`.
    static let filter_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_ic")
    /// Image `findbuddy_active`.
    static let findbuddy_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_active")
    /// Image `findbuddy_deactive`.
    static let findbuddy_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "findbuddy_deactive")
    /// Image `fitmarket_active`.
    static let fitmarket_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_active")
    /// Image `fitmarket_deactive`.
    static let fitmarket_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "fitmarket_deactive")
    /// Image `friends`.
    static let friends = Rswift.ImageResource(bundle: R.hostingBundle, name: "friends")
    /// Image `full_img`.
    static let full_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_img")
    /// Image `girl_two`.
    static let girl_two = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl_two")
    /// Image `girl`.
    static let girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "girl")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `greychat`.
    static let greychat = Rswift.ImageResource(bundle: R.hostingBundle, name: "greychat")
    /// Image `heart_dislike`.
    static let heart_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_dislike")
    /// Image `heart_like`.
    static let heart_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart_like")
    /// Image `helpandsupport`.
    static let helpandsupport = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpandsupport")
    /// Image `history_active`.
    static let history_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_active")
    /// Image `history_deactive`.
    static let history_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "history_deactive")
    /// Image `home_active`.
    static let home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_active")
    /// Image `home_deactive`.
    static let home_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_deactive")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ic_CheckedCircle_Black`.
    static let ic_CheckedCircle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CheckedCircle_Black")
    /// Image `ic_Circle_Black`.
    static let ic_Circle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Circle_Black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `img_twp`.
    static let img_twp = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_twp")
    /// Image `invvite`.
    static let invvite = Rswift.ImageResource(bundle: R.hostingBundle, name: "invvite")
    /// Image `itemimage`.
    static let itemimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "itemimage")
    /// Image `journal_activity`.
    static let journal_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "journal_activity")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `last_trans`.
    static let last_trans = Rswift.ImageResource(bundle: R.hostingBundle, name: "last_trans")
    /// Image `like`.
    static let like = Rswift.ImageResource(bundle: R.hostingBundle, name: "like")
    /// Image `listic`.
    static let listic = Rswift.ImageResource(bundle: R.hostingBundle, name: "listic")
    /// Image `location_active`.
    static let location_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_active")
    /// Image `locationic`.
    static let locationic = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationic")
    /// Image `login_back`.
    static let login_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_back")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `menu_horizontal`.
    static let menu_horizontal = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_horizontal")
    /// Image `menu_vertical`.
    static let menu_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_vertical")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `myfav`.
    static let myfav = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfav")
    /// Image `myfeed`.
    static let myfeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "myfeed")
    /// Image `mylist`.
    static let mylist = Rswift.ImageResource(bundle: R.hostingBundle, name: "mylist")
    /// Image `mypost`.
    static let mypost = Rswift.ImageResource(bundle: R.hostingBundle, name: "mypost")
    /// Image `nearbuddy`.
    static let nearbuddy = Rswift.ImageResource(bundle: R.hostingBundle, name: "nearbuddy")
    /// Image `notification_active`.
    static let notification_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_active")
    /// Image `notification_bell`.
    static let notification_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_bell")
    /// Image `notification_deactive`.
    static let notification_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_deactive")
    /// Image `offer_1`.
    static let offer_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer_1")
    /// Image `offer_2`.
    static let offer_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer_2")
    /// Image `offer_4`.
    static let offer_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer_4")
    /// Image `offer_active`.
    static let offer_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer_active")
    /// Image `offer_deactive`.
    static let offer_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "offer_deactive")
    /// Image `offers`.
    static let offers = Rswift.ImageResource(bundle: R.hostingBundle, name: "offers")
    /// Image `password`.
    static let password = Rswift.ImageResource(bundle: R.hostingBundle, name: "password")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus_active`.
    static let plus_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_active")
    /// Image `plus_deactive`.
    static let plus_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_deactive")
    /// Image `plus_only`.
    static let plus_only = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus_only")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `post_img`.
    static let post_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "post_img")
    /// Image `privacy_policy`.
    static let privacy_policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "privacy_policy")
    /// Image `profile_active`.
    static let profile_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_active")
    /// Image `profile_activec`.
    static let profile_activec = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_activec")
    /// Image `profile_deactive`.
    static let profile_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_deactive")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `ranking_active`.
    static let ranking_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_active")
    /// Image `ranking_deactive`.
    static let ranking_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ranking_deactive")
    /// Image `rateme_active`.
    static let rateme_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateme_active")
    /// Image `rateme_deacitive`.
    static let rateme_deacitive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateme_deacitive")
    /// Image `rateuser_active`.
    static let rateuser_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateuser_active")
    /// Image `rateuser_deactive`.
    static let rateuser_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateuser_deactive")
    /// Image `rateusers_active`.
    static let rateusers_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateusers_active")
    /// Image `rateusers_deactive`.
    static let rateusers_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "rateusers_deactive")
    /// Image `referfriend`.
    static let referfriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "referfriend")
    /// Image `roundicon`.
    static let roundicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "roundicon")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `selectedcart`.
    static let selectedcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedcart")
    /// Image `selectitem`.
    static let selectitem = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectitem")
    /// Image `sendmessage`.
    static let sendmessage = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendmessage")
    /// Image `setting_active`.
    static let setting_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_active")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `settings_deactive`.
    static let settings_deactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_deactive")
    /// Image `shareapp`.
    static let shareapp = Rswift.ImageResource(bundle: R.hostingBundle, name: "shareapp")
    /// Image `sharefriend`.
    static let sharefriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharefriend")
    /// Image `slide_1`.
    static let slide_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_1")
    /// Image `slide_2`.
    static let slide_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_2")
    /// Image `slide_3`.
    static let slide_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_3")
    /// Image `slide_4`.
    static let slide_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slide_4")
    /// Image `slideimg`.
    static let slideimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "slideimg")
    /// Image `splash_back`.
    static let splash_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_back")
    /// Image `stripe`.
    static let stripe = Rswift.ImageResource(bundle: R.hostingBundle, name: "stripe")
    /// Image `subscribe`.
    static let subscribe = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribe")
    /// Image `subscription`.
    static let subscription = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscription")
    /// Image `terms_conditions`.
    static let terms_conditions = Rswift.ImageResource(bundle: R.hostingBundle, name: "terms_conditions")
    /// Image `unlike`.
    static let unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlike")
    /// Image `unselectedcart`.
    static let unselectedcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedcart")
    /// Image `viewpagimage`.
    static let viewpagimage = Rswift.ImageResource(bundle: R.hostingBundle, name: "viewpagimage")
    /// Image `wantdonateselect`.
    static let wantdonateselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "wantdonateselect")
    /// Image `wantdonateunselect`.
    static let wantdonateunselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "wantdonateunselect")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ApplePay", bundle: ..., traitCollection: ...)`
    static func applePay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.applePay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calander", bundle: ..., traitCollection: ...)`
    static func calander(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calander, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home 24", bundle: ..., traitCollection: ...)`
    static func home24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Notification24", bundle: ..., traitCollection: ...)`
    static func notification24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Offers24", bundle: ..., traitCollection: ...)`
    static func offers24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offers24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PromoApplied", bundle: ..., traitCollection: ...)`
    static func promoApplied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoApplied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Right Arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Setting24", bundle: ..., traitCollection: ...)`
    static func setting24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhatsApp 1", bundle: ..., traitCollection: ...)`
    static func whatsApp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsApp1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WhatsApp", bundle: ..., traitCollection: ...)`
    static func whatsApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whatsApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addcart", bundle: ..., traitCollection: ...)`
    static func addcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addcart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_icon", bundle: ..., traitCollection: ...)`
    static func app_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arroimg", bundle: ..., traitCollection: ...)`
    static func arroimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arroimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backimg", bundle: ..., traitCollection: ...)`
    static func backimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag", bundle: ..., traitCollection: ...)`
    static func bag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "black_back", bundle: ..., traitCollection: ...)`
    static func black_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.black_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "booking", bundle: ..., traitCollection: ...)`
    static func booking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.booking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "button_img", bundle: ..., traitCollection: ...)`
    static func button_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.button_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_img", bundle: ..., traitCollection: ...)`
    static func cart_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg", bundle: ..., traitCollection: ...)`
    static func cartimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg2", bundle: ..., traitCollection: ...)`
    static func cartimg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cartimg3", bundle: ..., traitCollection: ...)`
    static func cartimg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cartimg3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "catic", bundle: ..., traitCollection: ...)`
    static func catic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_active", bundle: ..., traitCollection: ...)`
    static func chat_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_deactive", bundle: ..., traitCollection: ...)`
    static func chat_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cleaning", bundle: ..., traitCollection: ...)`
    static func cleaning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleaning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cleaning2", bundle: ..., traitCollection: ...)`
    static func cleaning2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleaning2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cleaning3", bundle: ..., traitCollection: ...)`
    static func cleaning3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cleaning3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "comment", bundle: ..., traitCollection: ...)`
    static func comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus", bundle: ..., traitCollection: ...)`
    static func contactus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cycling", bundle: ..., traitCollection: ...)`
    static func cycling(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cycling, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dateic", bundle: ..., traitCollection: ...)`
    static func dateic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete_ic", bundle: ..., traitCollection: ...)`
    static func delete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "donatehistory", bundle: ..., traitCollection: ...)`
    static func donatehistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.donatehistory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drawer_icon", bundle: ..., traitCollection: ...)`
    static func drawer_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drawer_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dummy_user", bundle: ..., traitCollection: ...)`
    static func dummy_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dummy_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_new", bundle: ..., traitCollection: ...)`
    static func edit_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editiprofile_ic", bundle: ..., traitCollection: ...)`
    static func editiprofile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editiprofile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_active", bundle: ..., traitCollection: ...)`
    static func feed_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_deactive", bundle: ..., traitCollection: ...)`
    static func feed_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feedback", bundle: ..., traitCollection: ...)`
    static func feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_ic", bundle: ..., traitCollection: ...)`
    static func filter_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_active", bundle: ..., traitCollection: ...)`
    static func findbuddy_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "findbuddy_deactive", bundle: ..., traitCollection: ...)`
    static func findbuddy_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.findbuddy_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_active", bundle: ..., traitCollection: ...)`
    static func fitmarket_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fitmarket_deactive", bundle: ..., traitCollection: ...)`
    static func fitmarket_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fitmarket_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "friends", bundle: ..., traitCollection: ...)`
    static func friends(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.friends, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "full_img", bundle: ..., traitCollection: ...)`
    static func full_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "girl", bundle: ..., traitCollection: ...)`
    static func girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "girl_two", bundle: ..., traitCollection: ...)`
    static func girl_two(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girl_two, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greychat", bundle: ..., traitCollection: ...)`
    static func greychat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greychat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_dislike", bundle: ..., traitCollection: ...)`
    static func heart_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart_like", bundle: ..., traitCollection: ...)`
    static func heart_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpandsupport", bundle: ..., traitCollection: ...)`
    static func helpandsupport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpandsupport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_active", bundle: ..., traitCollection: ...)`
    static func history_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "history_deactive", bundle: ..., traitCollection: ...)`
    static func history_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_active", bundle: ..., traitCollection: ...)`
    static func home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_deactive", bundle: ..., traitCollection: ...)`
    static func home_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_CheckedCircle_Black", bundle: ..., traitCollection: ...)`
    static func ic_CheckedCircle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_CheckedCircle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Circle_Black", bundle: ..., traitCollection: ...)`
    static func ic_Circle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Circle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_twp", bundle: ..., traitCollection: ...)`
    static func img_twp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_twp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "invvite", bundle: ..., traitCollection: ...)`
    static func invvite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invvite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "itemimage", bundle: ..., traitCollection: ...)`
    static func itemimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.itemimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "journal_activity", bundle: ..., traitCollection: ...)`
    static func journal_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.journal_activity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "last_trans", bundle: ..., traitCollection: ...)`
    static func last_trans(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.last_trans, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "like", bundle: ..., traitCollection: ...)`
    static func like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "listic", bundle: ..., traitCollection: ...)`
    static func listic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_active", bundle: ..., traitCollection: ...)`
    static func location_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationic", bundle: ..., traitCollection: ...)`
    static func locationic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_back", bundle: ..., traitCollection: ...)`
    static func login_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_horizontal", bundle: ..., traitCollection: ...)`
    static func menu_horizontal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_horizontal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_vertical", bundle: ..., traitCollection: ...)`
    static func menu_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfav", bundle: ..., traitCollection: ...)`
    static func myfav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfav, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "myfeed", bundle: ..., traitCollection: ...)`
    static func myfeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myfeed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mylist", bundle: ..., traitCollection: ...)`
    static func mylist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mylist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mypost", bundle: ..., traitCollection: ...)`
    static func mypost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mypost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nearbuddy", bundle: ..., traitCollection: ...)`
    static func nearbuddy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nearbuddy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_active", bundle: ..., traitCollection: ...)`
    static func notification_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_bell", bundle: ..., traitCollection: ...)`
    static func notification_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification_deactive", bundle: ..., traitCollection: ...)`
    static func notification_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer_1", bundle: ..., traitCollection: ...)`
    static func offer_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer_2", bundle: ..., traitCollection: ...)`
    static func offer_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer_4", bundle: ..., traitCollection: ...)`
    static func offer_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer_active", bundle: ..., traitCollection: ...)`
    static func offer_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offer_deactive", bundle: ..., traitCollection: ...)`
    static func offer_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offer_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "offers", bundle: ..., traitCollection: ...)`
    static func offers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.offers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password", bundle: ..., traitCollection: ...)`
    static func password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_active", bundle: ..., traitCollection: ...)`
    static func plus_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_deactive", bundle: ..., traitCollection: ...)`
    static func plus_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus_only", bundle: ..., traitCollection: ...)`
    static func plus_only(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus_only, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post_img", bundle: ..., traitCollection: ...)`
    static func post_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "privacy_policy", bundle: ..., traitCollection: ...)`
    static func privacy_policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacy_policy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_active", bundle: ..., traitCollection: ...)`
    static func profile_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_activec", bundle: ..., traitCollection: ...)`
    static func profile_activec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_activec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_deactive", bundle: ..., traitCollection: ...)`
    static func profile_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_active", bundle: ..., traitCollection: ...)`
    static func ranking_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ranking_deactive", bundle: ..., traitCollection: ...)`
    static func ranking_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ranking_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateme_active", bundle: ..., traitCollection: ...)`
    static func rateme_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateme_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateme_deacitive", bundle: ..., traitCollection: ...)`
    static func rateme_deacitive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateme_deacitive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateuser_active", bundle: ..., traitCollection: ...)`
    static func rateuser_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateuser_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateuser_deactive", bundle: ..., traitCollection: ...)`
    static func rateuser_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateuser_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateusers_active", bundle: ..., traitCollection: ...)`
    static func rateusers_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateusers_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rateusers_deactive", bundle: ..., traitCollection: ...)`
    static func rateusers_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rateusers_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referfriend", bundle: ..., traitCollection: ...)`
    static func referfriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referfriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roundicon", bundle: ..., traitCollection: ...)`
    static func roundicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedcart", bundle: ..., traitCollection: ...)`
    static func selectedcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedcart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectitem", bundle: ..., traitCollection: ...)`
    static func selectitem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectitem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sendmessage", bundle: ..., traitCollection: ...)`
    static func sendmessage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendmessage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_active", bundle: ..., traitCollection: ...)`
    static func setting_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_deactive", bundle: ..., traitCollection: ...)`
    static func settings_deactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_deactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shareapp", bundle: ..., traitCollection: ...)`
    static func shareapp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareapp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sharefriend", bundle: ..., traitCollection: ...)`
    static func sharefriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharefriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_1", bundle: ..., traitCollection: ...)`
    static func slide_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_2", bundle: ..., traitCollection: ...)`
    static func slide_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_3", bundle: ..., traitCollection: ...)`
    static func slide_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slide_4", bundle: ..., traitCollection: ...)`
    static func slide_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "slideimg", bundle: ..., traitCollection: ...)`
    static func slideimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slideimg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash_back", bundle: ..., traitCollection: ...)`
    static func splash_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stripe", bundle: ..., traitCollection: ...)`
    static func stripe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stripe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribe", bundle: ..., traitCollection: ...)`
    static func subscribe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscription", bundle: ..., traitCollection: ...)`
    static func subscription(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscription, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "terms_conditions", bundle: ..., traitCollection: ...)`
    static func terms_conditions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.terms_conditions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlike", bundle: ..., traitCollection: ...)`
    static func unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedcart", bundle: ..., traitCollection: ...)`
    static func unselectedcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedcart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "viewpagimage", bundle: ..., traitCollection: ...)`
    static func viewpagimage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.viewpagimage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wantdonateselect", bundle: ..., traitCollection: ...)`
    static func wantdonateselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wantdonateselect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wantdonateunselect", bundle: ..., traitCollection: ...)`
    static func wantdonateunselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wantdonateunselect, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `BookingCell`.
    static let bookingCell = _R.nib._BookingCell()
    /// Nib `CleaningServiceCell`.
    static let cleaningServiceCell = _R.nib._CleaningServiceCell()
    /// Nib `NotifyCell`.
    static let notifyCell = _R.nib._NotifyCell()
    /// Nib `OffersCell`.
    static let offersCell = _R.nib._OffersCell()
    /// Nib `ServiceCategoryCell`.
    static let serviceCategoryCell = _R.nib._ServiceCategoryCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookingCell) instead")
    static func bookingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CleaningServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cleaningServiceCell) instead")
    static func cleaningServiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cleaningServiceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotifyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notifyCell) instead")
    static func notifyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notifyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OffersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offersCell) instead")
    static func offersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offersCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ServiceCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serviceCategoryCell) instead")
    static func serviceCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceCategoryCell)
    }
    #endif

    static func bookingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
      return R.nib.bookingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
    }

    static func cleaningServiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleaningServiceCell? {
      return R.nib.cleaningServiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleaningServiceCell
    }

    static func notifyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
      return R.nib.notifyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
    }

    static func offersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersCell? {
      return R.nib.offersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersCell
    }

    static func serviceCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCategoryCell? {
      return R.nib.serviceCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCategoryCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BookingCell`.
    static let bookingCell: Rswift.ReuseIdentifier<BookingCell> = Rswift.ReuseIdentifier(identifier: "BookingCell")
    /// Reuse identifier `CleaningServiceCell`.
    static let cleaningServiceCell: Rswift.ReuseIdentifier<CleaningServiceCell> = Rswift.ReuseIdentifier(identifier: "CleaningServiceCell")
    /// Reuse identifier `NotifyCell`.
    static let notifyCell: Rswift.ReuseIdentifier<NotifyCell> = Rswift.ReuseIdentifier(identifier: "NotifyCell")
    /// Reuse identifier `OffersCell`.
    static let offersCell: Rswift.ReuseIdentifier<OffersCell> = Rswift.ReuseIdentifier(identifier: "OffersCell")
    /// Reuse identifier `ServiceCategoryCell`.
    static let serviceCategoryCell: Rswift.ReuseIdentifier<ServiceCategoryCell> = Rswift.ReuseIdentifier(identifier: "ServiceCategoryCell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 143 localization keys.
    struct localizable {
      /// ar translation: إيقاف
      ///
      /// Locales: ar
      static let off = Rswift.StringResource(key: "off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar"], comment: nil)
      /// en translation: 02:30 pm
      ///
      /// Locales: en, ar
      static let pm = Rswift.StringResource(key: "02:30 pm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: 315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en
      static let mangalNagarRoadMangalNagarIndoreMadhyaPradesh452016India = Rswift.StringResource(key: "315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account created successfully
      ///
      /// Locales: en, ar
      static let accountCreatedSuccessfully = Rswift.StringResource(key: "Account created successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Add Promo Code
      ///
      /// Locales: en, ar
      static let addPromoCode = Rswift.StringResource(key: "Add Promo Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Address Detail
      ///
      /// Locales: en, ar
      static let addressDetail = Rswift.StringResource(key: "Address Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Already have an account?
      ///
      /// Locales: en, ar
      static let alreadyHaveAnAccount = Rswift.StringResource(key: "Already have an account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Apartment service
      ///
      /// Locales: en
      static let apartmentService = Rswift.StringResource(key: "Apartment service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Appartment
      ///
      /// Locales: en
      static let appartment = Rswift.StringResource(key: "Appartment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: en, ar
      static let apply = Rswift.StringResource(key: "Apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Arabic
      ///
      /// Locales: en
      static let arabic = Rswift.StringResource(key: "Arabic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to delete your account
      ///
      /// Locales: en, ar
      static let areYouSureYouWantToDeleteYourAccount = Rswift.StringResource(key: "Are you sure you want to delete your account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Base Fee
      ///
      /// Locales: en, ar
      static let baseFee = Rswift.StringResource(key: "Base Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Beach Name
      ///
      /// Locales: en, ar
      static let beachName = Rswift.StringResource(key: "Beach Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Booking
      ///
      /// Locales: en, ar
      static let booking = Rswift.StringResource(key: "Booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Booking Fees
      ///
      /// Locales: en
      static let bookingFees = Rswift.StringResource(key: "Booking Fees", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Booking For
      ///
      /// Locales: en
      static let bookingFor = Rswift.StringResource(key: "Booking For", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en, ar
      static let cardNumber = Rswift.StringResource(key: "Card Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: en
      static let changeLanguage = Rswift.StringResource(key: "Change Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ar
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, ar
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Contact Us
      ///
      /// Locales: en, ar
      static let contactUs = Rswift.StringResource(key: "Contact Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, ar
      static let currentPassword = Rswift.StringResource(key: "Current Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: en
      static let donE = Rswift.StringResource(key: "DONE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, ar
      static let date = Rswift.StringResource(key: "Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Delete Account
      ///
      /// Locales: en, ar
      static let deleteAccount = Rswift.StringResource(key: "Delete Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: en, ar
      static let discount = Rswift.StringResource(key: "Discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Don't have an account
      ///
      /// Locales: en
      static let donTHaveAnAccount = Rswift.StringResource(key: "Don't have an account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, ar
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ar
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: End Time
      ///
      /// Locales: en
      static let endTime = Rswift.StringResource(key: "End Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, ar
      static let enter = Rswift.StringResource(key: "Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter card number
      ///
      /// Locales: en, ar
      static let enterCardNumber = Rswift.StringResource(key: "Enter card number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter expiry date
      ///
      /// Locales: en, ar
      static let enterExpiryDate = Rswift.StringResource(key: "Enter expiry date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter name on card
      ///
      /// Locales: en, ar
      static let enterNameOnCard = Rswift.StringResource(key: "Enter name on card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter security code
      ///
      /// Locales: en, ar
      static let enterSecurityCode = Rswift.StringResource(key: "Enter security code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter villa or appartment number
      ///
      /// Locales: en, ar
      static let enterVillaOrAppartmentNumber = Rswift.StringResource(key: "Enter villa or appartment number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar
      static let enterYourEmailAddressToResetYourPassword = Rswift.StringResource(key: "Enter your email address to reset your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Expiry Date
      ///
      /// Locales: en
      static let expiryDate = Rswift.StringResource(key: "Expiry Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, ar
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Forget password
      ///
      /// Locales: en, ar
      static let forgetPassword = Rswift.StringResource(key: "Forget password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, ar
      static let giveRating = Rswift.StringResource(key: "Give Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ar
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: House Type
      ///
      /// Locales: en, ar
      static let houseType = Rswift.StringResource(key: "House Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: How Many Maids
      ///
      /// Locales: en, ar
      static let howManyMaids = Rswift.StringResource(key: "How Many Maids", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: How many living room
      ///
      /// Locales: en, ar
      static let howManyLivingRoom = Rswift.StringResource(key: "How many living room", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: How many rooms
      ///
      /// Locales: en, ar
      static let howManyRooms = Rswift.StringResource(key: "How many rooms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en
      static let iHaveReadTheTermsConditionsAndAcceptThem = Rswift.StringResource(key: "I have read the Terms & Conditions and accept them", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invite Friends
      ///
      /// Locales: en
      static let inviteFriends = Rswift.StringResource(key: "Invite Friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, ar
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, ar
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, ar
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login to your account
      ///
      /// Locales: en
      static let loginToYourAccount = Rswift.StringResource(key: "Login to your account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, ar
      static let mobile = Rswift.StringResource(key: "Mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: My Bookings
      ///
      /// Locales: en, ar
      static let myBookings = Rswift.StringResource(key: "My Bookings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, ar
      static let nexT = Rswift.StringResource(key: "NEXT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, ar
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Name On Card
      ///
      /// Locales: en
      static let nameOnCard = Rswift.StringResource(key: "Name On Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New password has sent to your email
      ///
      /// Locales: en, ar
      static let newPasswordHasSentToYourEmail = Rswift.StringResource(key: "New password has sent to your email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ar
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: No Data Available
      ///
      /// Locales: en
      static let noDataAvailable = Rswift.StringResource(key: "No Data Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No Internet Connection. Make sure your device is connected to the internet
      ///
      /// Locales: en, ar
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No Internet Connection. Make sure your device is connected to the internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, ar
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: en
      static let offers = Rswift.StringResource(key: "Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ar
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, ar
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password changed successfully
      ///
      /// Locales: en, ar
      static let passwordChangedSuccessfully = Rswift.StringResource(key: "Password changed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en, ar
      static let pay = Rswift.StringResource(key: "Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Payment done successfully
      ///
      /// Locales: en, ar
      static let paymentDoneSuccessfully = Rswift.StringResource(key: "Payment done successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please Wait
      ///
      /// Locales: en, ar
      static let pleaseWait = Rswift.StringResource(key: "Please Wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please confirm the password
      ///
      /// Locales: en, ar
      static let pleaseConfirmThePassword = Rswift.StringResource(key: "Please confirm the password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter any other number
      ///
      /// Locales: en, ar
      static let pleaseEnterAnyOtherNumber = Rswift.StringResource(key: "Please enter any other number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter email
      ///
      /// Locales: en, ar
      static let pleaseEnterEmail = Rswift.StringResource(key: "Please enter email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter mobile number
      ///
      /// Locales: en, ar
      static let pleaseEnterMobileNumber = Rswift.StringResource(key: "Please enter mobile number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter the correct code
      ///
      /// Locales: en, ar
      static let pleaseEnterTheCorrectCode = Rswift.StringResource(key: "Please enter the correct code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter the password
      ///
      /// Locales: en, ar
      static let pleaseEnterThePassword = Rswift.StringResource(key: "Please enter the password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter the required details!
      ///
      /// Locales: en, ar
      static let pleaseEnterTheRequiredDetails = Rswift.StringResource(key: "Please enter the required details!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please enter the valid email address
      ///
      /// Locales: en, ar
      static let pleaseEnterTheValidEmailAddress = Rswift.StringResource(key: "Please enter the valid email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please give the rating!
      ///
      /// Locales: en, ar
      static let pleaseGiveTheRating = Rswift.StringResource(key: "Please give the rating!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please read the terms and condition
      ///
      /// Locales: en, ar
      static let pleaseReadTheTermsAndCondition = Rswift.StringResource(key: "Please read the terms and condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select the date
      ///
      /// Locales: en, ar
      static let pleaseSelectTheDate = Rswift.StringResource(key: "Please select the date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select the end time
      ///
      /// Locales: en, ar
      static let pleaseSelectTheEndTime = Rswift.StringResource(key: "Please select the end time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Please select the start time
      ///
      /// Locales: en, ar
      static let pleaseSelectTheStartTime = Rswift.StringResource(key: "Please select the start time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, ar
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Profile updated successfully!
      ///
      /// Locales: en, ar
      static let profileUpdatedSuccessfully = Rswift.StringResource(key: "Profile updated successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: REGISTER
      ///
      /// Locales: en
      static let registeR = Rswift.StringResource(key: "REGISTER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remember Me
      ///
      /// Locales: en
      static let rememberMe = Rswift.StringResource(key: "Remember Me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Required first name
      ///
      /// Locales: en, ar
      static let requiredFirstName = Rswift.StringResource(key: "Required first name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Required last name
      ///
      /// Locales: en, ar
      static let requiredLastName = Rswift.StringResource(key: "Required last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Review added successfully
      ///
      /// Locales: en, ar
      static let reviewAddedSuccessfully = Rswift.StringResource(key: "Review added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: SAR 10.00
      ///
      /// Locales: en, ar
      static let sar1000 = Rswift.StringResource(key: "SAR 10.00", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: SIGN IN
      ///
      /// Locales: en, ar
      static let signiN = Rswift.StringResource(key: "SIGN IN", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, ar
      static let submiT = Rswift.StringResource(key: "SUBMIT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: en
      static let searchLocation = Rswift.StringResource(key: "Search Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Second Phone Number
      ///
      /// Locales: en
      static let secondPhoneNumber = Rswift.StringResource(key: "Second Phone Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Security Code
      ///
      /// Locales: en, ar
      static let securityCode = Rswift.StringResource(key: "Security Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, ar
      static let select = Rswift.StringResource(key: "Select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Select Address
      ///
      /// Locales: en
      static let selectAddress = Rswift.StringResource(key: "Select Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Language
      ///
      /// Locales: en
      static let selectLanguage = Rswift.StringResource(key: "Select Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Rating
      ///
      /// Locales: en
      static let selectRating = Rswift.StringResource(key: "Select Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, ar
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Service
      ///
      /// Locales: en
      static let service = Rswift.StringResource(key: "Service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Service Detail
      ///
      /// Locales: en, ar
      static let serviceDetail = Rswift.StringResource(key: "Service Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Service Per Hour
      ///
      /// Locales: en
      static let servicePerHour = Rswift.StringResource(key: "Service Per Hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ar
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, ar
      static let signIn = Rswift.StringResource(key: "Sign In", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Sign In Now
      ///
      /// Locales: en, ar
      static let signInNow = Rswift.StringResource(key: "Sign In Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en, ar
      static let signUp = Rswift.StringResource(key: "Sign Up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Sign Up Now
      ///
      /// Locales: en, ar
      static let signUpNow = Rswift.StringResource(key: "Sign Up Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: en, ar
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Start Date
      ///
      /// Locales: en
      static let startDate = Rswift.StringResource(key: "Start Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start Time
      ///
      /// Locales: en, ar
      static let startTime = Rswift.StringResource(key: "Start Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Tax
      ///
      /// Locales: en
      static let tax = Rswift.StringResource(key: "Tax", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Term and Condition
      ///
      /// Locales: en, ar
      static let termAndCondition = Rswift.StringResource(key: "Term and Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar
      static let termsAndConditions = Rswift.StringResource(key: "Terms and Conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: en, ar
      static let time = Rswift.StringResource(key: "Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Time for maid will be an hour
      ///
      /// Locales: en
      static let timeForMaidWillBeAnHour = Rswift.StringResource(key: "Time for maid will be an hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: en, ar
      static let totalAmount = Rswift.StringResource(key: "Total Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: UPDATE
      ///
      /// Locales: en, ar
      static let updatE = Rswift.StringResource(key: "UPDATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Update Profile
      ///
      /// Locales: en
      static let updateProfile = Rswift.StringResource(key: "Update Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Use code
      ///
      /// Locales: en, ar
      static let useCode = Rswift.StringResource(key: "Use code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: en
      static let userName = Rswift.StringResource(key: "User Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Verification Code
      ///
      /// Locales: en, ar
      static let verificationCode = Rswift.StringResource(key: "Verification Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Villa or Appartment Number
      ///
      /// Locales: en
      static let villaOrAppartmentNumber = Rswift.StringResource(key: "Villa or Appartment Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: We will contact you soon
      ///
      /// Locales: en, ar
      static let weWillContactYouSoon = Rswift.StringResource(key: "We will contact you soon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Write Review
      ///
      /// Locales: en, ar
      static let writeReview = Rswift.StringResource(key: "Write Review", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: You can apply coupon at the time of booking
      ///
      /// Locales: en
      static let youCanApplyCouponAtTheTimeOfBooking = Rswift.StringResource(key: "You can apply coupon at the time of booking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have already applied the code
      ///
      /// Locales: en, ar
      static let youHaveAlreadyAppliedTheCode = Rswift.StringResource(key: "You have already applied the code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: Your booking added successfully
      ///
      /// Locales: en
      static let yourBookingAddedSuccessfully = Rswift.StringResource(key: "Your booking added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: from
      ///
      /// Locales: en, ar
      static let from = Rswift.StringResource(key: "from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: hour
      ///
      /// Locales: en, ar
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: maids
      ///
      /// Locales: en, ar
      static let maids = Rswift.StringResource(key: "maids", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)
      /// en translation: to
      ///
      /// Locales: en, ar
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar"], comment: nil)

      /// ar translation: إيقاف
      ///
      /// Locales: ar
      static func off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("off", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "off"
        }

        return NSLocalizedString("off", bundle: bundle, comment: "")
      }

      /// en translation: 02:30 pm
      ///
      /// Locales: en, ar
      static func pm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("02:30 pm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "02:30 pm"
        }

        return NSLocalizedString("02:30 pm", bundle: bundle, comment: "")
      }

      /// en translation: 315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India
      ///
      /// Locales: en
      static func mangalNagarRoadMangalNagarIndoreMadhyaPradesh452016India(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India"
        }

        return NSLocalizedString("315, Mangal Nagar Road, Mangal Nagar, Indore, Madhya Pradesh 452016, India", bundle: bundle, comment: "")
      }

      /// en translation: Account created successfully
      ///
      /// Locales: en, ar
      static func accountCreatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Account created successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Account created successfully"
        }

        return NSLocalizedString("Account created successfully", bundle: bundle, comment: "")
      }

      /// en translation: Add Promo Code
      ///
      /// Locales: en, ar
      static func addPromoCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Promo Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Promo Code"
        }

        return NSLocalizedString("Add Promo Code", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address"
        }

        return NSLocalizedString("Address", bundle: bundle, comment: "")
      }

      /// en translation: Address Detail
      ///
      /// Locales: en, ar
      static func addressDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Detail"
        }

        return NSLocalizedString("Address Detail", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account?
      ///
      /// Locales: en, ar
      static func alreadyHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have an account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have an account?"
        }

        return NSLocalizedString("Already have an account?", bundle: bundle, comment: "")
      }

      /// en translation: Apartment service
      ///
      /// Locales: en
      static func apartmentService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apartment service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apartment service"
        }

        return NSLocalizedString("Apartment service", bundle: bundle, comment: "")
      }

      /// en translation: Appartment
      ///
      /// Locales: en
      static func appartment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Appartment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Appartment"
        }

        return NSLocalizedString("Appartment", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: en, ar
      static func apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply"
        }

        return NSLocalizedString("Apply", bundle: bundle, comment: "")
      }

      /// en translation: Arabic
      ///
      /// Locales: en
      static func arabic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arabic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arabic"
        }

        return NSLocalizedString("Arabic", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete your account
      ///
      /// Locales: en, ar
      static func areYouSureYouWantToDeleteYourAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete your account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete your account"
        }

        return NSLocalizedString("Are you sure you want to delete your account", bundle: bundle, comment: "")
      }

      /// en translation: Base Fee
      ///
      /// Locales: en, ar
      static func baseFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Base Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Base Fee"
        }

        return NSLocalizedString("Base Fee", bundle: bundle, comment: "")
      }

      /// en translation: Beach Name
      ///
      /// Locales: en, ar
      static func beachName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Beach Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Beach Name"
        }

        return NSLocalizedString("Beach Name", bundle: bundle, comment: "")
      }

      /// en translation: Booking
      ///
      /// Locales: en, ar
      static func booking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking"
        }

        return NSLocalizedString("Booking", bundle: bundle, comment: "")
      }

      /// en translation: Booking Fees
      ///
      /// Locales: en
      static func bookingFees(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking Fees", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking Fees"
        }

        return NSLocalizedString("Booking Fees", bundle: bundle, comment: "")
      }

      /// en translation: Booking For
      ///
      /// Locales: en
      static func bookingFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Booking For", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Booking For"
        }

        return NSLocalizedString("Booking For", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en, ar
      static func cardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card Number"
        }

        return NSLocalizedString("Card Number", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: en
      static func changeLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Language"
        }

        return NSLocalizedString("Change Language", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ar
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, ar
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Contact Us
      ///
      /// Locales: en, ar
      static func contactUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contact Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contact Us"
        }

        return NSLocalizedString("Contact Us", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, ar
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Password"
        }

        return NSLocalizedString("Current Password", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: en
      static func donE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DONE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DONE"
        }

        return NSLocalizedString("DONE", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, ar
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date"
        }

        return NSLocalizedString("Date", bundle: bundle, comment: "")
      }

      /// en translation: Delete Account
      ///
      /// Locales: en, ar
      static func deleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Account"
        }

        return NSLocalizedString("Delete Account", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: en, ar
      static func discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discount"
        }

        return NSLocalizedString("Discount", bundle: bundle, comment: "")
      }

      /// en translation: Don't have an account
      ///
      /// Locales: en
      static func donTHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't have an account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't have an account"
        }

        return NSLocalizedString("Don't have an account", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, ar
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ar
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: End Time
      ///
      /// Locales: en
      static func endTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("End Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "End Time"
        }

        return NSLocalizedString("End Time", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, ar
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter"
        }

        return NSLocalizedString("Enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter card number
      ///
      /// Locales: en, ar
      static func enterCardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter card number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter card number"
        }

        return NSLocalizedString("Enter card number", bundle: bundle, comment: "")
      }

      /// en translation: Enter expiry date
      ///
      /// Locales: en, ar
      static func enterExpiryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter expiry date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter expiry date"
        }

        return NSLocalizedString("Enter expiry date", bundle: bundle, comment: "")
      }

      /// en translation: Enter name on card
      ///
      /// Locales: en, ar
      static func enterNameOnCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter name on card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter name on card"
        }

        return NSLocalizedString("Enter name on card", bundle: bundle, comment: "")
      }

      /// en translation: Enter security code
      ///
      /// Locales: en, ar
      static func enterSecurityCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter security code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter security code"
        }

        return NSLocalizedString("Enter security code", bundle: bundle, comment: "")
      }

      /// en translation: Enter villa or appartment number
      ///
      /// Locales: en, ar
      static func enterVillaOrAppartmentNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter villa or appartment number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter villa or appartment number"
        }

        return NSLocalizedString("Enter villa or appartment number", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar
      static func enterYourEmailAddressToResetYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your email address to reset your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your email address to reset your password"
        }

        return NSLocalizedString("Enter your email address to reset your password", bundle: bundle, comment: "")
      }

      /// en translation: Expiry Date
      ///
      /// Locales: en
      static func expiryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expiry Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expiry Date"
        }

        return NSLocalizedString("Expiry Date", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, ar
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Forget password
      ///
      /// Locales: en, ar
      static func forgetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forget password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forget password"
        }

        return NSLocalizedString("Forget password", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, ar
      static func giveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Rating"
        }

        return NSLocalizedString("Give Rating", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ar
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: House Type
      ///
      /// Locales: en, ar
      static func houseType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("House Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "House Type"
        }

        return NSLocalizedString("House Type", bundle: bundle, comment: "")
      }

      /// en translation: How Many Maids
      ///
      /// Locales: en, ar
      static func howManyMaids(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How Many Maids", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How Many Maids"
        }

        return NSLocalizedString("How Many Maids", bundle: bundle, comment: "")
      }

      /// en translation: How many living room
      ///
      /// Locales: en, ar
      static func howManyLivingRoom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How many living room", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How many living room"
        }

        return NSLocalizedString("How many living room", bundle: bundle, comment: "")
      }

      /// en translation: How many rooms
      ///
      /// Locales: en, ar
      static func howManyRooms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How many rooms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How many rooms"
        }

        return NSLocalizedString("How many rooms", bundle: bundle, comment: "")
      }

      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en
      static func iHaveReadTheTermsConditionsAndAcceptThem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I have read the Terms & Conditions and accept them", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I have read the Terms & Conditions and accept them"
        }

        return NSLocalizedString("I have read the Terms & Conditions and accept them", bundle: bundle, comment: "")
      }

      /// en translation: Invite Friends
      ///
      /// Locales: en
      static func inviteFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invite Friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invite Friends"
        }

        return NSLocalizedString("Invite Friends", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, ar
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, ar
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, ar
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Login to your account
      ///
      /// Locales: en
      static func loginToYourAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login to your account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login to your account"
        }

        return NSLocalizedString("Login to your account", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, ar
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile"
        }

        return NSLocalizedString("Mobile", bundle: bundle, comment: "")
      }

      /// en translation: My Bookings
      ///
      /// Locales: en, ar
      static func myBookings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Bookings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Bookings"
        }

        return NSLocalizedString("My Bookings", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, ar
      static func nexT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NEXT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NEXT"
        }

        return NSLocalizedString("NEXT", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, ar
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: Name On Card
      ///
      /// Locales: en
      static func nameOnCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name On Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name On Card"
        }

        return NSLocalizedString("Name On Card", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: New password has sent to your email
      ///
      /// Locales: en, ar
      static func newPasswordHasSentToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password has sent to your email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password has sent to your email"
        }

        return NSLocalizedString("New password has sent to your email", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ar
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Data Available
      ///
      /// Locales: en
      static func noDataAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Data Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Data Available"
        }

        return NSLocalizedString("No Data Available", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Connection. Make sure your device is connected to the internet
      ///
      /// Locales: en, ar
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Connection. Make sure your device is connected to the internet"
        }

        return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, ar
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: en
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offers"
        }

        return NSLocalizedString("Offers", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ar
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, ar
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open"
        }

        return NSLocalizedString("Open", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Password changed successfully
      ///
      /// Locales: en, ar
      static func passwordChangedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password changed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password changed successfully"
        }

        return NSLocalizedString("Password changed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en, ar
      static func pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pay"
        }

        return NSLocalizedString("Pay", bundle: bundle, comment: "")
      }

      /// en translation: Payment done successfully
      ///
      /// Locales: en, ar
      static func paymentDoneSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment done successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment done successfully"
        }

        return NSLocalizedString("Payment done successfully", bundle: bundle, comment: "")
      }

      /// en translation: Please Wait
      ///
      /// Locales: en, ar
      static func pleaseWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Wait", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Wait"
        }

        return NSLocalizedString("Please Wait", bundle: bundle, comment: "")
      }

      /// en translation: Please confirm the password
      ///
      /// Locales: en, ar
      static func pleaseConfirmThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please confirm the password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please confirm the password"
        }

        return NSLocalizedString("Please confirm the password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter any other number
      ///
      /// Locales: en, ar
      static func pleaseEnterAnyOtherNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter any other number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter any other number"
        }

        return NSLocalizedString("Please enter any other number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter email
      ///
      /// Locales: en, ar
      static func pleaseEnterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter email"
        }

        return NSLocalizedString("Please enter email", bundle: bundle, comment: "")
      }

      /// en translation: Please enter mobile number
      ///
      /// Locales: en, ar
      static func pleaseEnterMobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter mobile number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter mobile number"
        }

        return NSLocalizedString("Please enter mobile number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the correct code
      ///
      /// Locales: en, ar
      static func pleaseEnterTheCorrectCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the correct code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the correct code"
        }

        return NSLocalizedString("Please enter the correct code", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the password
      ///
      /// Locales: en, ar
      static func pleaseEnterThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the password"
        }

        return NSLocalizedString("Please enter the password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the required details!
      ///
      /// Locales: en, ar
      static func pleaseEnterTheRequiredDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the required details!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the required details!"
        }

        return NSLocalizedString("Please enter the required details!", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the valid email address
      ///
      /// Locales: en, ar
      static func pleaseEnterTheValidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the valid email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the valid email address"
        }

        return NSLocalizedString("Please enter the valid email address", bundle: bundle, comment: "")
      }

      /// en translation: Please give the rating!
      ///
      /// Locales: en, ar
      static func pleaseGiveTheRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please give the rating!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please give the rating!"
        }

        return NSLocalizedString("Please give the rating!", bundle: bundle, comment: "")
      }

      /// en translation: Please read the terms and condition
      ///
      /// Locales: en, ar
      static func pleaseReadTheTermsAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please read the terms and condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please read the terms and condition"
        }

        return NSLocalizedString("Please read the terms and condition", bundle: bundle, comment: "")
      }

      /// en translation: Please select the date
      ///
      /// Locales: en, ar
      static func pleaseSelectTheDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the date"
        }

        return NSLocalizedString("Please select the date", bundle: bundle, comment: "")
      }

      /// en translation: Please select the end time
      ///
      /// Locales: en, ar
      static func pleaseSelectTheEndTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the end time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the end time"
        }

        return NSLocalizedString("Please select the end time", bundle: bundle, comment: "")
      }

      /// en translation: Please select the start time
      ///
      /// Locales: en, ar
      static func pleaseSelectTheStartTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select the start time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select the start time"
        }

        return NSLocalizedString("Please select the start time", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, ar
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Profile updated successfully!
      ///
      /// Locales: en, ar
      static func profileUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile updated successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile updated successfully!"
        }

        return NSLocalizedString("Profile updated successfully!", bundle: bundle, comment: "")
      }

      /// en translation: REGISTER
      ///
      /// Locales: en
      static func registeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REGISTER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REGISTER"
        }

        return NSLocalizedString("REGISTER", bundle: bundle, comment: "")
      }

      /// en translation: Remember Me
      ///
      /// Locales: en
      static func rememberMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remember Me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remember Me"
        }

        return NSLocalizedString("Remember Me", bundle: bundle, comment: "")
      }

      /// en translation: Required first name
      ///
      /// Locales: en, ar
      static func requiredFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required first name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required first name"
        }

        return NSLocalizedString("Required first name", bundle: bundle, comment: "")
      }

      /// en translation: Required last name
      ///
      /// Locales: en, ar
      static func requiredLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Required last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Required last name"
        }

        return NSLocalizedString("Required last name", bundle: bundle, comment: "")
      }

      /// en translation: Review added successfully
      ///
      /// Locales: en, ar
      static func reviewAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Review added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Review added successfully"
        }

        return NSLocalizedString("Review added successfully", bundle: bundle, comment: "")
      }

      /// en translation: SAR 10.00
      ///
      /// Locales: en, ar
      static func sar1000(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SAR 10.00", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SAR 10.00"
        }

        return NSLocalizedString("SAR 10.00", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN
      ///
      /// Locales: en, ar
      static func signiN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SIGN IN", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SIGN IN"
        }

        return NSLocalizedString("SIGN IN", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, ar
      static func submiT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUBMIT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUBMIT"
        }

        return NSLocalizedString("SUBMIT", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: en
      static func searchLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Location"
        }

        return NSLocalizedString("Search Location", bundle: bundle, comment: "")
      }

      /// en translation: Second Phone Number
      ///
      /// Locales: en
      static func secondPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Second Phone Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Second Phone Number"
        }

        return NSLocalizedString("Second Phone Number", bundle: bundle, comment: "")
      }

      /// en translation: Security Code
      ///
      /// Locales: en, ar
      static func securityCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security Code"
        }

        return NSLocalizedString("Security Code", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, ar
      static func select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select"
        }

        return NSLocalizedString("Select", bundle: bundle, comment: "")
      }

      /// en translation: Select Address
      ///
      /// Locales: en
      static func selectAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Address"
        }

        return NSLocalizedString("Select Address", bundle: bundle, comment: "")
      }

      /// en translation: Select Language
      ///
      /// Locales: en
      static func selectLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Language"
        }

        return NSLocalizedString("Select Language", bundle: bundle, comment: "")
      }

      /// en translation: Select Rating
      ///
      /// Locales: en
      static func selectRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Rating"
        }

        return NSLocalizedString("Select Rating", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, ar
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Service
      ///
      /// Locales: en
      static func service(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service"
        }

        return NSLocalizedString("Service", bundle: bundle, comment: "")
      }

      /// en translation: Service Detail
      ///
      /// Locales: en, ar
      static func serviceDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service Detail"
        }

        return NSLocalizedString("Service Detail", bundle: bundle, comment: "")
      }

      /// en translation: Service Per Hour
      ///
      /// Locales: en
      static func servicePerHour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Service Per Hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Service Per Hour"
        }

        return NSLocalizedString("Service Per Hour", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ar
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, ar
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In"
        }

        return NSLocalizedString("Sign In", bundle: bundle, comment: "")
      }

      /// en translation: Sign In Now
      ///
      /// Locales: en, ar
      static func signInNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign In Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign In Now"
        }

        return NSLocalizedString("Sign In Now", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en, ar
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign Up"
        }

        return NSLocalizedString("Sign Up", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up Now
      ///
      /// Locales: en, ar
      static func signUpNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign Up Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign Up Now"
        }

        return NSLocalizedString("Sign Up Now", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: en, ar
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong"
        }

        return NSLocalizedString("Something went wrong", bundle: bundle, comment: "")
      }

      /// en translation: Start Date
      ///
      /// Locales: en
      static func startDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start Date"
        }

        return NSLocalizedString("Start Date", bundle: bundle, comment: "")
      }

      /// en translation: Start Time
      ///
      /// Locales: en, ar
      static func startTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start Time"
        }

        return NSLocalizedString("Start Time", bundle: bundle, comment: "")
      }

      /// en translation: Tax
      ///
      /// Locales: en
      static func tax(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tax", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tax"
        }

        return NSLocalizedString("Tax", bundle: bundle, comment: "")
      }

      /// en translation: Term and Condition
      ///
      /// Locales: en, ar
      static func termAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Term and Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Term and Condition"
        }

        return NSLocalizedString("Term and Condition", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Conditions
      ///
      /// Locales: en, ar
      static func termsAndConditions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and Conditions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and Conditions"
        }

        return NSLocalizedString("Terms and Conditions", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: en, ar
      static func time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time"
        }

        return NSLocalizedString("Time", bundle: bundle, comment: "")
      }

      /// en translation: Time for maid will be an hour
      ///
      /// Locales: en
      static func timeForMaidWillBeAnHour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time for maid will be an hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time for maid will be an hour"
        }

        return NSLocalizedString("Time for maid will be an hour", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: en, ar
      static func totalAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Amount"
        }

        return NSLocalizedString("Total Amount", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE
      ///
      /// Locales: en, ar
      static func updatE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UPDATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "UPDATE"
        }

        return NSLocalizedString("UPDATE", bundle: bundle, comment: "")
      }

      /// en translation: Update Profile
      ///
      /// Locales: en
      static func updateProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update Profile"
        }

        return NSLocalizedString("Update Profile", bundle: bundle, comment: "")
      }

      /// en translation: Use code
      ///
      /// Locales: en, ar
      static func useCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use code"
        }

        return NSLocalizedString("Use code", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: en
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Name"
        }

        return NSLocalizedString("User Name", bundle: bundle, comment: "")
      }

      /// en translation: Verification Code
      ///
      /// Locales: en, ar
      static func verificationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verification Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verification Code"
        }

        return NSLocalizedString("Verification Code", bundle: bundle, comment: "")
      }

      /// en translation: Villa or Appartment Number
      ///
      /// Locales: en
      static func villaOrAppartmentNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Villa or Appartment Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Villa or Appartment Number"
        }

        return NSLocalizedString("Villa or Appartment Number", bundle: bundle, comment: "")
      }

      /// en translation: We will contact you soon
      ///
      /// Locales: en, ar
      static func weWillContactYouSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("We will contact you soon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "We will contact you soon"
        }

        return NSLocalizedString("We will contact you soon", bundle: bundle, comment: "")
      }

      /// en translation: Write Review
      ///
      /// Locales: en, ar
      static func writeReview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write Review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write Review"
        }

        return NSLocalizedString("Write Review", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You can apply coupon at the time of booking
      ///
      /// Locales: en
      static func youCanApplyCouponAtTheTimeOfBooking(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can apply coupon at the time of booking", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can apply coupon at the time of booking"
        }

        return NSLocalizedString("You can apply coupon at the time of booking", bundle: bundle, comment: "")
      }

      /// en translation: You have already applied the code
      ///
      /// Locales: en, ar
      static func youHaveAlreadyAppliedTheCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have already applied the code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have already applied the code"
        }

        return NSLocalizedString("You have already applied the code", bundle: bundle, comment: "")
      }

      /// en translation: Your booking added successfully
      ///
      /// Locales: en
      static func yourBookingAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your booking added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your booking added successfully"
        }

        return NSLocalizedString("Your booking added successfully", bundle: bundle, comment: "")
      }

      /// en translation: from
      ///
      /// Locales: en, ar
      static func from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from"
        }

        return NSLocalizedString("from", bundle: bundle, comment: "")
      }

      /// en translation: hour
      ///
      /// Locales: en, ar
      static func hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hour"
        }

        return NSLocalizedString("hour", bundle: bundle, comment: "")
      }

      /// en translation: maids
      ///
      /// Locales: en, ar
      static func maids(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("maids", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "maids"
        }

        return NSLocalizedString("maids", bundle: bundle, comment: "")
      }

      /// en translation: to
      ///
      /// Locales: en, ar
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CleaningServiceCell.validate()
      try _OffersCell.validate()
    }

    struct _BookingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BookingCell

      let bundle = R.hostingBundle
      let identifier = "BookingCell"
      let name = "BookingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BookingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookingCell
      }

      fileprivate init() {}
    }

    struct _CleaningServiceCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CleaningServiceCell

      let bundle = R.hostingBundle
      let identifier = "CleaningServiceCell"
      let name = "CleaningServiceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CleaningServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CleaningServiceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cleaning3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cleaning3' is used in nib 'CleaningServiceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _NotifyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotifyCell

      let bundle = R.hostingBundle
      let identifier = "NotifyCell"
      let name = "NotifyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
      }

      fileprivate init() {}
    }

    struct _OffersCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OffersCell

      let bundle = R.hostingBundle
      let identifier = "OffersCell"
      let name = "OffersCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OffersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OffersCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "offer_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'offer_1' is used in nib 'OffersCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'OffersCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ServiceCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ServiceCategoryCell

      let bundle = R.hostingBundle
      let identifier = "ServiceCategoryCell"
      let name = "ServiceCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCategoryCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "app_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'app_icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ServiceDetailVC

      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let amountVC = StoryboardViewControllerResource<AmountVC>(identifier: "AmountVC")
      let bookingDetailVC = StoryboardViewControllerResource<BookingDetailVC>(identifier: "BookingDetailVC")
      let bookingVC = StoryboardViewControllerResource<BookingVC>(identifier: "BookingVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let locationDetailVC = StoryboardViewControllerResource<LocationDetailVC>(identifier: "LocationDetailVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Main"
      let notificationVC = StoryboardViewControllerResource<NotificationVC>(identifier: "NotificationVC")
      let offersVC = StoryboardViewControllerResource<OffersVC>(identifier: "OffersVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let ratingVC = StoryboardViewControllerResource<RatingVC>(identifier: "RatingVC")
      let serviceDetailVC = StoryboardViewControllerResource<ServiceDetailVC>(identifier: "ServiceDetailVC")
      let settingVC = StoryboardViewControllerResource<SettingVC>(identifier: "SettingVC")
      let signUpVC = StoryboardViewControllerResource<SignUpVC>(identifier: "SignUpVC")
      let tabBarVC = StoryboardViewControllerResource<TabBarVC>(identifier: "TabBarVC")
      let typeVC = StoryboardViewControllerResource<TypeVC>(identifier: "TypeVC")
      let userInfoVC = StoryboardViewControllerResource<UserInfoVC>(identifier: "UserInfoVC")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func amountVC(_: Void = ()) -> AmountVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: amountVC)
      }

      func bookingDetailVC(_: Void = ()) -> BookingDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingDetailVC)
      }

      func bookingVC(_: Void = ()) -> BookingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bookingVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      func locationDetailVC(_: Void = ()) -> LocationDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: locationDetailVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func notificationVC(_: Void = ()) -> NotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationVC)
      }

      func offersVC(_: Void = ()) -> OffersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: offersVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func ratingVC(_: Void = ()) -> RatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ratingVC)
      }

      func serviceDetailVC(_: Void = ()) -> ServiceDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: serviceDetailVC)
      }

      func settingVC(_: Void = ()) -> SettingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingVC)
      }

      func signUpVC(_: Void = ()) -> SignUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpVC)
      }

      func tabBarVC(_: Void = ()) -> TabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarVC)
      }

      func typeVC(_: Void = ()) -> TypeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: typeVC)
      }

      func userInfoVC(_: Void = ()) -> UserInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Calander", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Calander' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home 24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home 24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Notification24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Notification24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Offers24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Offers24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Setting24", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Setting24' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WhatsApp 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WhatsApp 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "booking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'booking' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editiprofile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editiprofile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "helpandsupport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'helpandsupport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Circle_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Circle_Black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "invvite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'invvite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "language", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'language' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "privacy_policy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'privacy_policy' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "terms_conditions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'terms_conditions' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Theme' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().amountVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'amountVC' could not be loaded from storyboard 'Main' as 'AmountVC'.") }
        if _R.storyboard.main().bookingDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingDetailVC' could not be loaded from storyboard 'Main' as 'BookingDetailVC'.") }
        if _R.storyboard.main().bookingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bookingVC' could not be loaded from storyboard 'Main' as 'BookingVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'Main' as 'ContactUsVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'Main' as 'LanguageVC'.") }
        if _R.storyboard.main().locationDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'locationDetailVC' could not be loaded from storyboard 'Main' as 'LocationDetailVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().notificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if _R.storyboard.main().offersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'offersVC' could not be loaded from storyboard 'Main' as 'OffersVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().ratingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ratingVC' could not be loaded from storyboard 'Main' as 'RatingVC'.") }
        if _R.storyboard.main().serviceDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'serviceDetailVC' could not be loaded from storyboard 'Main' as 'ServiceDetailVC'.") }
        if _R.storyboard.main().settingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingVC' could not be loaded from storyboard 'Main' as 'SettingVC'.") }
        if _R.storyboard.main().signUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if _R.storyboard.main().tabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarVC' could not be loaded from storyboard 'Main' as 'TabBarVC'.") }
        if _R.storyboard.main().typeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'typeVC' could not be loaded from storyboard 'Main' as 'TypeVC'.") }
        if _R.storyboard.main().userInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoVC' could not be loaded from storyboard 'Main' as 'UserInfoVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
