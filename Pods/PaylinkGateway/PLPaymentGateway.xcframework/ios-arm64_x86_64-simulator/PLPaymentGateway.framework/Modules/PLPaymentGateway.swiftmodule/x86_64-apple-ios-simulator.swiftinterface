// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PLPaymentGateway
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import PLPaymentGateway
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct PLInvoiceWebView : SwiftUI.UIViewRepresentable {
  public init(urlString: Swift.String? = nil, bgColor: UIKit.UIColor? = UIColor.white, completionHandler: @escaping (_ orderNumber: Swift.String, _ transactionNo: Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: PLPaymentGateway.PLInvoiceWebView.Context) -> WebKit.WKWebView
  public static func resetCache()
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: WebKit.WKWebView, context: PLPaymentGateway.PLInvoiceWebView.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> PLPaymentGateway.PLInvoiceWebView.Coordinator
  @objc @_Concurrency.MainActor(unsafe) public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate, UIKit.UIScrollViewDelegate {
    @_Concurrency.MainActor(unsafe) public init(parent: PLPaymentGateway.PLInvoiceWebView, completionHandler: @escaping (_ orderNumber: Swift.String, _ transactionNo: Swift.String) -> Swift.Void)
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
    @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
    @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PLInvoiceWebViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
public class PaylinkGateway {
  public enum Environment {
    case test
    case prod
    case localhost
    case dev
    public static func == (a: PLPaymentGateway.PaylinkGateway.Environment, b: PLPaymentGateway.PaylinkGateway.Environment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public init(paymentFormUrl: Swift.String = "", platform: Swift.String = "")
  public init(environment: PLPaymentGateway.PaylinkGateway.Environment, paymentFormUrl: Swift.String = "", platform: Swift.String = "")
  public init(apiId: Swift.String, secretKey: Swift.String, environment: PLPaymentGateway.PaylinkGateway.Environment, paymentFormUrl: Swift.String, platform: Swift.String)
  public init(apiId: Swift.String, secretKey: Swift.String, environment: PLPaymentGateway.PaylinkGateway.Environment)
  public func openPaymentForm(transactionNo: Swift.String, from viewController: UIKit.UIViewController, width: Swift.Int = -1, bgColor: Swift.String = "FFF", lang: Swift.String = "en", topSpace: Swift.Int = 25, textColor: Swift.String = "000", buttonTextColor: Swift.String = "FFF", mainColor: Swift.String = "3087de", completion: ((Swift.Result<(orderNumber: Swift.String, transactionNo: Swift.String), any Swift.Error>) -> Swift.Void)?, loaded: @escaping () -> Swift.Void)
  public func getPaymentFormView(transactionNo: Swift.String, width: Swift.Int = -1, bgColor: Swift.String = "FFF", lang: Swift.String = "en", topSpace: Swift.Int = 25, textColor: Swift.String = "000", buttonTextColor: Swift.String = "FFF", mainColor: Swift.String = "3087de", completion: @escaping (_ orderNumber: Swift.String, _ transactionNo: Swift.String) -> Swift.Void) -> PLPaymentGateway.PLInvoiceWebView
  public func openInvoiceURL(url: Foundation.URL, from viewController: UIKit.UIViewController, clientName: Swift.String, clientMobile: Swift.String, width: Swift.Int = -1, lang: Swift.String = "en", bgColor: Swift.String = "FFF", topSpace: Swift.Int = 25, textColor: Swift.String = "000", buttonTextColor: Swift.String = "FFF", mainColor: Swift.String = "3087de", completion: ((Swift.Result<(orderNumber: Swift.String, transactionNo: Swift.String), any Swift.Error>) -> Swift.Void)?, loaded: @escaping () -> Swift.Void)
  public func getInvoiceURLView(url: Swift.String, clientName: Swift.String, clientMobile: Swift.String, lang: Swift.String = "en", width: Swift.Int = -1, bgColor: Swift.String = "FFF", topSpace: Swift.Int = 25, textColor: Swift.String = "000", buttonTextColor: Swift.String = "FFF", mainColor: Swift.String = "3087de", completion: @escaping (_ orderNumber: Swift.String, _ transactionNo: Swift.String) -> Swift.Void) -> PLPaymentGateway.PLInvoiceWebView
  public func auth(completion: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  public func addInvoice(idToken: Swift.String, customerName: Swift.String, customerMobile: Swift.String, amount: Swift.Double, currency: Swift.String, note: Swift.String, orderNumber: Swift.String, products: [PLPaymentGateway.PLProduct], completion: @escaping (Swift.Result<Swift.Dictionary<Swift.String, Any>, any Swift.Error>) -> Swift.Void)
  public func showInvoice(idToken: Swift.String, customerName: Swift.String, customerMobile: Swift.String, amount: Swift.Double, currency: Swift.String, note: Swift.String, orderNumber: Swift.String, products: [PLPaymentGateway.PLProduct], completion: @escaping (Swift.Result<Swift.Dictionary<Swift.String, Any>, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int)
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  convenience public init(rgb: Swift.Int)
}
public struct PLOrder {
  public init(customerName: Swift.String, customerMobile: Swift.String, amount: Swift.Double, currency: Swift.String, note: Swift.String, orderNumber: Swift.String, products: [PLPaymentGateway.PLProduct])
  public init()
}
public enum PLAPIError : Swift.Error {
  case invalidURL
  case invalidResponse
  case statusCode(Swift.Int)
  case invalidParameters
  case invalidData
  case jsonParsingError
}
public struct PLProduct : Swift.Codable {
  public init(title: Swift.String, qty: Swift.Int, price: Swift.Double, description: Swift.String = "", imageSrc: Swift.String = "")
  public init(from decoder: any Swift.Decoder) throws
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
}
extension PLPaymentGateway.PaylinkGateway.Environment : Swift.Equatable {}
extension PLPaymentGateway.PaylinkGateway.Environment : Swift.Hashable {}
